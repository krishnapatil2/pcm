"""
Email Utilities for PCM Application
Easy-to-use email functions for integration with other modules
"""

from email_sender import EmailSender
import os


class EmailUtils:
    """
    Utility class for sending various types of emails using the EmailSender.
    Provides simplified interfaces for common email sending scenarios.
    """
    
    def __init__(self, config_file='email_config.json'):
        self.email_sender = EmailSender(config_file)
    
    def send_report_email(self, report_type, output_file, recipient_email, additional_info=""):
        """Send report via email with predefined templates"""
        return send_report_email(report_type, output_file, recipient_email, additional_info)
    
    def send_notification_email(self, subject, message, recipient_email):
        """Send simple notification email"""
        return send_notification_email(subject, message, recipient_email)
    
    def send_error_email(self, error_message, recipient_email):
        """Send error notification email"""
        return send_error_notification(error_message, "", recipient_email)


def send_report_email(report_type, output_file, recipient_email, additional_info=""):
    """
    Send report via email with predefined templates
    
    Args:
        report_type (str): Type of report (e.g., "Monthly Float", "NMASS Allocation")
        output_file (str): Path to the output file
        recipient_email (str): Email address of recipient
        additional_info (str): Additional information to include in email
    
    Returns:
        tuple: (success: bool, message: str)
    """
    try:
        sender = EmailSender()
        
        # Create email content
        subject = f"PCM {report_type} Report - {os.path.basename(output_file)}"
        
        body = f"""
Dear Recipient,

Please find attached the {report_type} report generated by PCM Application.

File: {os.path.basename(output_file)}
Generated: {additional_info}

Best regards,
PCM Application
        """.strip()
        
        # Send email with attachment
        return sender.send_email(
            to=recipient_email,
            subject=subject,
            body=body,
            attachments=[output_file] if os.path.exists(output_file) else None
        )
        
    except Exception as e:
        return False, f"Failed to send report email: {str(e)}"


def send_notification_email(recipient_email, subject, message, priority="normal"):
    """
    Send notification email
    
    Args:
        recipient_email (str): Email address of recipient
        subject (str): Email subject
        message (str): Email message
        priority (str): Priority level (normal, high, urgent)
    
    Returns:
        tuple: (success: bool, message: str)
    """
    try:
        sender = EmailSender()
        
        # Add priority prefix to subject
        priority_prefix = {
            "high": "[HIGH PRIORITY] ",
            "urgent": "[URGENT] ",
            "normal": ""
        }.get(priority, "")
        
        full_subject = f"{priority_prefix}{subject}"
        
        # Send email
        return sender.send_email(
            to=recipient_email,
            subject=full_subject,
            body=message
        )
        
    except Exception as e:
        return False, f"Failed to send notification email: {str(e)}"


def send_error_notification(error_message, error_details="", recipient_email=None):
    """
    Send error notification email
    
    Args:
        error_message (str): Error message
        error_details (str): Detailed error information
        recipient_email (str): Email address for notification (uses default if None)
    
    Returns:
        tuple: (success: bool, message: str)
    """
    try:
        sender = EmailSender()
        config = sender.get_config()
        
        # Use default recipient if not provided
        if not recipient_email:
            recipient_email = config.get('default_to', '')
        
        if not recipient_email:
            return False, "No recipient email configured"
        
        subject = "[PCM Application] Error Notification"
        
        body = f"""
An error occurred in the PCM Application:

Error: {error_message}

Details: {error_details}

Please check the application logs for more information.

Generated: {os.path.basename(__file__)}
        """.strip()
        
        return sender.send_email(
            to=recipient_email,
            subject=subject,
            body=body
        )
        
    except Exception as e:
        return False, f"Failed to send error notification: {str(e)}"


def get_email_config_status():
    """
    Get current email configuration status
    
    Returns:
        dict: Configuration status information
    """
    try:
        sender = EmailSender()
        return sender.get_email_status()
    except Exception as e:
        return {
            'config_valid': False,
            'config_message': f"Error loading configuration: {str(e)}",
            'smtp_server': '',
            'smtp_port': '',
            'email_address': '',
            'has_password': False,
            'use_tls': True,
            'use_ssl': False
        }


def test_email_setup():
    """
    Test email setup and configuration
    
    Returns:
        tuple: (success: bool, message: str)
    """
    try:
        sender = EmailSender()
        return sender.test_connection()
    except Exception as e:
        return False, f"Email setup test failed: {str(e)}"


# Convenience functions for common email operations
def quick_send(to, subject, body, **kwargs):
    """Quick email sending function"""
    sender = EmailSender()
    return sender.send_email(to=to, subject=subject, body=body, **kwargs)


def send_with_template(template_name, **kwargs):
    """Send email using template"""
    sender = EmailSender()
    return sender.send_template_email(template_name, **kwargs)
